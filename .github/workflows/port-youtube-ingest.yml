name: Update YouTube Playlist and Video Entities in Port

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: false
        description: |
          Who triggered the action and general context (blueprint, run id, etc...)
        type: string 
        
  push:
    branches:
      - 'test'    # Runs on test branch

jobs:
  update_port_entities:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      
      - name: Fetch YouTube Playlist and Video Data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          #!/bin/bash
      
          PLAYLIST_ID="PL5ErBr2d3QJH0kbwTQ7HSuzvBb4zIWzhy"
      
          # Fetch the playlist details
          playlist_response=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=$PLAYLIST_ID&key=$YOUTUBE_API_KEY")
      
          # Log the raw response for debugging
          echo "Raw playlist response: $playlist_response"
      
          # Ensure the response is valid JSON before processing
          if ! echo "$playlist_response" | jq empty; then
            echo "Error: The playlist response is not valid JSON or is empty."
            exit 1
          fi
      
          # Extract playlist details using jq
          playlist_title=$(echo "$playlist_response" | jq -r '.items[0].snippet.title // "No title available"')
          playlist_description=$(echo "$playlist_response" | jq -r '.items[0].snippet.description // "No description available"')
      
          # Handle localized description and title if they exist
          localized_title=$(echo "$playlist_response" | jq -r '.items[0].snippet.localized.title // empty')
          localized_description=$(echo "$playlist_response" | jq -r '.items[0].snippet.localized.description // empty')
      
          # If localized data is available, override the default title/description
          if [ -n "$localized_title" ]; then
            playlist_title="$localized_title"
          fi
          if [ -n "$localized_description" ]; then
            playlist_description="$localized_description"
          fi
      
          # Extract other necessary details
          playlist_published_at=$(echo "$playlist_response" | jq -r '.items[0].snippet.publishedAt // "No published date available"')
          playlist_channel_id=$(echo "$playlist_response" | jq -r '.items[0].snippet.channelId // "No channel ID"')
          playlist_channel_title=$(echo "$playlist_response" | jq -r '.items[0].snippet.channelTitle // "No channel title"')
          playlist_link="https://www.youtube.com/playlist?list=$PLAYLIST_ID"
      
          # Extract thumbnails URLs (ensure valid URLs or fallback to a default message)
          playlist_thumbnails_default=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.default.url // "No thumbnail URL"')
          playlist_thumbnails_medium=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.medium.url // "No thumbnail URL"')
          playlist_thumbnails_high=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.high.url // "No thumbnail URL"')
          playlist_thumbnails_standard=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.standard.url // "No thumbnail URL"')
      
          # Create playlist JSON directly using jq
          playlist_json=$(jq -n --arg id "$PLAYLIST_ID" \
                              --arg title "$playlist_title" \
                              --arg link "$playlist_link" \
                              --arg description "$playlist_description" \
                              --arg publishedAt "$playlist_published_at" \
                              --arg channelId "$playlist_channel_id" \
                              --arg channelTitle "$playlist_channel_title" \
                              --arg default_thumbnail "$playlist_thumbnails_default" \
                              --arg medium_thumbnail "$playlist_thumbnails_medium" \
                              --arg high_thumbnail "$playlist_thumbnails_high" \
                              --arg standard_thumbnail "$playlist_thumbnails_standard" \
                              '{
                                identifier: $id,
                                blueprint: "youtube_playlist",
                                title: $title,
                                description: $description,
                                properties: {
                                  link: $link,
                                  playlistDescription: $description,
                                  publishedAt: $publishedAt,
                                  channelId: $channelId,
                                  channelTitle: $channelTitle,
                                  thumbnails: {
                                    default: $default_thumbnail,
                                    medium: $medium_thumbnail,
                                    high: $high_thumbnail,
                                    standard: $standard_thumbnail
                                  }
                                }
                              }')
      
          # Log the playlist JSON
          echo "Playlist JSON: $playlist_json"
      
          # Save playlist JSON into a file
          echo "$playlist_json" > playlist_data.json
      
          # Combine playlist and video JSON into a final file
          combined_json=$(echo "$video_json_array" | jq --argjson playlist "$playlist_json" '. + [$playlist]')
      
          # Log the final combined JSON
          echo "Combined JSON: $combined_json"
      
          echo $combined_json > port_entities.json
          echo "entities=$(jq -c . port_entities.json)" >> $GITHUB_ENV
      

      - name: Bulk Create/Update YouTube Playlist and Video Entities in Port
        id: bulk_create_update
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: BULK_UPSERT
          entities: ${{ env.entities }}

      - name: Inform completion of request to Create / Update Catalog in Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: ${{ steps.bulk_create_update.outcome == 'success' && 'SUCCESS' || 'FAILURE' }}
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: ${{ steps.bulk_create_update.outcome == 'success' && 'YouTube Data created/Updated Successfully' || 'Error in YouTube Data creation/update' }}