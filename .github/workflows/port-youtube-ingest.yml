name: Update YouTube Playlist and Video Entities in Port

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: false
        description: |
          Who triggered the action and general context (blueprint, run id, etc...)
        type: string 
        
  push:
    branches:
      - 'test'    # Runs on test branch

jobs:
  update_port_entities:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Fetch YouTube Playlist and Video Data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          PLAYLIST_ID="PL5ErBr2d3QJH0kbwTQ7HSuzvBb4zIWzhy"

          # Fetch playlist details
          playlist_response=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=$PLAYLIST_ID&key=$YOUTUBE_API_KEY")

          # Log the raw response for debugging
          echo "Raw playlist response: $playlist_response"

          # Ensure response is valid JSON before processing
          if ! echo "$playlist_response" | jq empty; then
            echo "Error: The playlist response is not valid JSON or is empty."
            exit 1
          fi

          # Extract playlist details
          playlist_title=$(echo "$playlist_response" | jq -r '.items[0].snippet.title')
          playlist_description=$(echo "$playlist_response" | jq -r '.items[0].snippet.description // "No description available"')

          # Handle localized description and title if they exist
          localized_title=$(echo "$playlist_response" | jq -r '.items[0].snippet.localized.title // empty')
          localized_description=$(echo "$playlist_response" | jq -r '.items[0].snippet.localized.description // empty')

          # If localized data is available, override the default title/description
          if [ -n "$localized_title" ]; then
            playlist_title="$localized_title"
          fi
          if [ -n "$localized_description" ]; then
            playlist_description="$localized_description"
          fi

          # Extract other necessary details
          playlist_published_at=$(echo "$playlist_response" | jq -r '.items[0].snippet.publishedAt')
          playlist_channel_id=$(echo "$playlist_response" | jq -r '.items[0].snippet.channelId // "No channel ID"')
          playlist_channel_title=$(echo "$playlist_response" | jq -r '.items[0].snippet.channelTitle // "No channel title"')
          playlist_link="https://www.youtube.com/playlist?list=$PLAYLIST_ID"

          # Extract thumbnails URLs
          playlist_thumbnails_default=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.default.url // "No thumbnail URL"')
          playlist_thumbnails_medium=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.medium.url // "No thumbnail URL"')
          playlist_thumbnails_high=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.high.url // "No thumbnail URL"')
          playlist_thumbnails_standard=$(echo "$playlist_response" | jq -r '.items[0].snippet.thumbnails.standard.url // "No thumbnail URL"')

          # Create playlist JSON directly using jq
          playlist_json=$(jq -n --arg id "$PLAYLIST_ID" \
                              --arg title "$playlist_title" \
                              --arg link "$playlist_link" \
                              --arg description "$playlist_description" \
                              --arg publishedAt "$playlist_published_at" \
                              --arg channelId "$playlist_channel_id" \
                              --arg channelTitle "$playlist_channel_title" \
                              --arg default_thumbnail "$playlist_thumbnails_default" \
                              --arg medium_thumbnail "$playlist_thumbnails_medium" \
                              --arg high_thumbnail "$playlist_thumbnails_high" \
                              --arg standard_thumbnail "$playlist_thumbnails_standard" \
                              '{
                                identifier: $id,
                                blueprint: "youtube_playlist",
                                title: $title,
                                description: $description,
                                properties: {
                                  link: $link,
                                  playlistDescription: $description,
                                  publishedAt: $publishedAt,
                                  channelId: $channelId,
                                  channelTitle: $channelTitle,
                                  thumbnails: {
                                    default: $default_thumbnail,
                                    medium: $medium_thumbnail,
                                    high: $high_thumbnail,
                                    standard: $standard_thumbnail
                                  }
                                }
                              }')

          # Log the playlist JSON to inspect
          echo "Playlist JSON: $playlist_json"

          # Initialize combined JSON array with the playlist as the first element
          combined_json=$(echo "[]" | jq --argjson playlist "$playlist_json" '. + [$playlist]')

          # Log the combined JSON for debugging
          echo "Combined JSON: $combined_json"

          # Fetch video details for each video in the playlist
          video_data=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&maxResults=50&playlistId=$PLAYLIST_ID&key=$YOUTUBE_API_KEY")

          # Loop through each video, gather details, and format JSON for Port
          for video_item in $(echo $video_data | jq -r '.items[]'); do
            video_id=$(echo $video_item | jq -r '.contentDetails.videoId')
            position=$(echo $video_item | jq -r '.snippet.position')
            
            video_response=$(curl -s "https://youtube.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=$YOUTUBE_API_KEY")

            # Log the raw video response for debugging
            echo "Video Response: $video_response"

            # Ensure video response is valid JSON
            if ! echo "$video_response" | jq empty; then
              echo "Error: The video response is not valid JSON or is empty for video ID $video_id."
              continue
            fi

            title=$(echo $video_response | jq -r '.items[0].snippet.title')

            # Handle video description: if empty or missing, return "No description available"
            description=$(echo $video_response | jq -r '.items[0].snippet.description // "No description available"')

            publishedAt=$(echo $video_response | jq -r '.items[0].snippet.publishedAt')
            raw_duration=$(echo $video_response | jq -r '.items[0].contentDetails.duration')
            
            # Convert ISO 8601 duration (e.g., PT3M47S) to "3:47"
            duration=$(echo $raw_duration | sed -E 's/^PT([0-9]+)H([0-9]+)M([0-9]+)S/\1:\2:\3/;s/^PT([0-9]+)M([0-9]+)S/\1:\2/;s/^PT([0-9]+)H([0-9]+)M/\1:\2/;s/^PT([0-9]+)M/\1:00/;s/^PT([0-9]+)H/\1:00:00/')

            likes=$(echo $video_response | jq -r '.items[0].statistics.likeCount // 0')
            views=$(echo $video_response | jq -r '.items[0].statistics.viewCount // 0')
            comments=$(echo $video_response | jq -r '.items[0].statistics.commentCount // 0')
            link="https://www.youtube.com/watch?v=$video_id"

            # Extract video thumbnails URLs
            video_thumbnails_default=$(echo $video_response | jq -r '.items[0].snippet.thumbnails.default.url // "No thumbnail URL"')
            video_thumbnails_medium=$(echo $video_response | jq -r '.items[0].snippet.thumbnails.medium.url // "No thumbnail URL"')
            video_thumbnails_high=$(echo $video_response | jq -r '.items[0].snippet.thumbnails.high.url // "No thumbnail URL"')
            video_thumbnails_standard=$(echo $video_response | jq -r '.items[0].snippet.thumbnails.standard.url // "No thumbnail URL"')

            # Get channel details
            videoOwnerChannelTitle=$(echo $video_response | jq -r '.items[0].snippet.channelTitle // "No channel title"')
            videoOwnerChannelId=$(echo $video_response | jq -r '.items[0].snippet.channelId // "No channel ID"')

            # Create video JSON
            video_json=$(jq -n --arg id "$video_id" \
                                --arg title "$title" \
                                --arg link "$link" \
                                --arg description "$description" \
                                --arg publishedAt "$publishedAt" \
                                --arg duration "$duration" \
                                --arg likes "$likes" \
                                --arg views "$views" \
                                --arg comments "$comments" \
                                --arg position "$position" \
                                --arg playlist_id "$PLAYLIST_ID" \
                                --arg default_thumbnail "$video_thumbnails_default" \
                                --arg medium_thumbnail "$video_thumbnails_medium" \
                                --arg high_thumbnail "$video_thumbnails_high" \
                                --arg standard_thumbnail "$video_thumbnails_standard" \
                                --arg videoOwnerChannelTitle "$videoOwnerChannelTitle" \
                                --arg videoOwnerChannelId "$videoOwnerChannelId" \
                                '{
                                  identifier: $id,
                                  blueprint: "youtube_video",
                                  title: $title,
                                  description:$description,
                                  properties: {
                                    link: $link,
                                    videoDescription: $description,
                                    publishedAt: $publishedAt,
                                    duration: $duration,
                                    likes: $likes,
                                    views: $views,
                                    comments: $comments,
                                    position: $position,
                                    thumbnails: {
                                      default: $default_thumbnail,
                                      medium: $medium_thumbnail,
                                      high: $high_thumbnail,
                                      standard: $standard_thumbnail
                                    },
                                    videoOwnerChannelTitle: $videoOwnerChannelTitle,
                                    videoOwnerChannelId: $videoOwnerChannelId
                                  },
                                  relations: {
                                    playlist: $playlist_id
                                  }
                                }')

            # Log the video JSON to inspect
            echo "Video JSON: $video_json"

            # Append each video JSON to the combined JSON array
            combined_json=$(echo "$combined_json" | jq --argjson video "$video_json" '. + [$video]')
          done

          # Save the combined JSON to a file or pass to next steps in the workflow
          echo $combined_json > combined_playlist.json

      - name: Bulk Create/Update YouTube Playlist and Video Entities in Port
        id: bulk_create_update
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: BULK_UPSERT
          entities: ${{ env.entities }}

      - name: Inform completion of request to Create / Update Catalog in Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: ${{ steps.bulk_create_update.outcome == 'success' && 'SUCCESS' || 'FAILURE' }}
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: ${{ steps.bulk_create_update.outcome == 'success' && 'YouTube Data created/Updated Successfully' || 'Error in YouTube Data creation/update' }}