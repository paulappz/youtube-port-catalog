name: Update YouTube Playlist and Video Entities in Port

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: false
        description:
          Who triggered the action and general context (blueprint, run id, etc...)
        type: string 

  push:
    branches:
      - 'test'    # Runs on test branch

jobs:
  update_port_entities:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Fetch YouTube Playlist and Video Data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          PLAYLIST_ID="PL5ErBr2d3QJH0kbwTQ7HSuzvBb4zIWzhy"
          YOUTUBE_API_KEY="${YOUTUBE_API_KEY}"

          # Fetch playlist info
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          if echo "$playlist_response" | jq -e '.items | length == 0' > /dev/null; then
            echo "No items found in the playlist info response."
            exit 1
          fi

          item=$(echo "$playlist_response" | jq -r '.items <sup> </sup>')
          playlist_id=$(echo "$item" | jq -r '.id')
          playlist_title=$(echo "$item" | jq -r '.snippet.title')
          playlist_description=$(echo "$item" | jq -r '.snippet.description // "No description available" | select(length > 0) | select(trim | length > 0) or "No description available"')
          published_at=$(echo "$item" | jq -r '.snippet.publishedAt')
          channel_id=$(echo "$item" | jq -r '.snippet.channelId')
          channel_title=$(echo "$item" | jq -r '.snippet.channelTitle')
          thumbnails_default=$(echo "$item" | jq -r '.snippet.thumbnails.default.url // "No thumbnail available"')
          thumbnails_medium=$(echo "$item" | jq -r '.snippet.thumbnails.medium.url // "No thumbnail available"')
          thumbnails_high=$(echo "$item" | jq -r '.snippet.thumbnails.high.url // "No thumbnail available"')
          thumbnails_standard=$(echo "$item" | jq -r '.snippet.thumbnails.standard.url // "No thumbnail available"')
          thumbnails_maxres=$(echo "$item" | jq -r '.snippet.thumbnails.maxres.url // "No thumbnail available"')
          localized_title=$(echo "$item" | jq -r '.snippet.localized.title // "No Localized Title"')
          localized_description=$(echo "$item" | jq -r '.snippet.localized.description // "No Localized Description" | select(length > 0) | select(trim | length > 0) or "No Localized Description"')

          playlist_json=$(echo "{}" | jq \
            --arg identifier "$playlist_id" \
            --arg blueprint "youtube_playlist" \
            --arg title "$playlist_title" \
            --arg link "https://www.youtube.com/playlist?list=$playlist_id" \
            --arg playlistDescription "$playlist_description" \
            --arg publishedAt "$published_at" \
            --arg channelId "$channel_id" \
            --arg channelTitle "$channel_title" \
            --arg default "$thumbnails_default" \
            --arg medium "$thumbnails_medium" \
            --arg high "$thumbnails_high" \
            --arg standard "$thumbnails_standard" \
            --arg maxres "$thumbnails_maxres" \
            --arg localizedTitle "$localized_title" \
            --arg localizedDescription "$localized_description" \
            '
            .identifier = $identifier |
            .blueprint = $blueprint |
            .title = $title |
            .properties.link = $link |
            .properties.playlistDescription = $playlistDescription |
            .properties.publishedAt = $publishedAt |
            .properties.channelId = $channelId |
            .properties.channelTitle = $channelTitle |
            .properties.thumbnails.default = $default |
            .properties.thumbnails.medium = $medium |
            .properties.thumbnails.high = $high |
            .properties.thumbnails.standard = $standard |
            .properties.thumbnails.maxres = $maxres |
            .properties.localized.title = $localizedTitle |
            .properties.localized.description = $localizedDescription
            ')

          combined_json=$(echo "[]" | jq --argjson playlist "$playlist_json" '. + [$playlist]')

          # Fetch playlist items
          next_page_token=""
          while true; do
            playlist_items_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=${PLAYLIST_ID}&maxResults=50&pageToken=${next_page_token}&key=${YOUTUBE_API_KEY}")
            if echo "$playlist_items_response" | jq -e '.items | length == 0' > /dev/null; then
              echo "No items found in the playlist response."
              break
            fi

            for item in $(echo "$playlist_items_response" | jq -c '.items[]'); do
              video_id=$(echo "$item" | jq -r '.contentDetails.videoId')

              # Fetch video details
              video_response=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=contentDetails,statistics&id=${video_id}&key=${YOUTUBE_API_KEY}")
              if echo "$video_response" | jq -e '.items | length == 0' > /dev/null; then
                echo "No video details found for video ID: $video_id"
                continue
              fi

              video_details=$(echo "$video_response" | jq -r '.items <sup> </sup>')
              duration=$(echo "$video_details" | jq -r '.contentDetails.duration' | awk -F'T' '{print $2}' | sed 's/H/:/g; s/M/:/g; s/S//g' | sed 's/^0*//; s/:0*/:/g; s/^://')
              likes=$(echo "$video_details" | jq -r '.statistics.likeCount // "No likes available"')
              views=$(echo "$video_details" | jq -r '.statistics.viewCount // "No views available"')
              comments=$(echo "$video_details" | jq -r '.statistics.commentCount // "No comments available"')

              title=$(echo "$item" | jq -r '.snippet.title // "No title available"')
              description=$(echo "$item" | jq -r '.snippet.description // "No description available" | select(length > 0) | select(trim | length > 0) or "No description available"')
              published_at=$(echo "$item" | jq -r '.snippet.publishedAt // "No published date available"')
              position=$(echo "$item" | jq -r '.snippet.position // "No position available"')
              thumbnails_default=$(echo "$item" | jq -r '.snippet.thumbnails.default.url // "No thumbnail available"')
              thumbnails_medium=$(echo "$item" | jq -r '.snippet.thumbnails.medium.url // "No thumbnail available"')
              thumbnails_high=$(echo "$item" | jq -r '.snippet.thumbnails.high.url // "No thumbnail available"')
              thumbnails_standard=$(echo "$item" | jq -r '.snippet.thumbnails.standard.url // "No thumbnail available"')
              thumbnails_maxres=$(echo "$item" | jq -r '.snippet.thumbnails.maxres.url // "No thumbnail available"')
              channel_title=$(echo "$item" | jq -r '.snippet.channelTitle // "No channel title available"')
              channel_id=$(echo "$item" | jq -r '.snippet.channelId // "No channel ID available"')

              video_json=$(echo "{}" | jq \
                --arg identifier "$video_id" \
                --arg blueprint "youtube_video" \
                --arg title "$title" \
                --arg link "https://www.youtube.com/watch?v=$video_id" \
                --arg videoDescription "$description" \
                --arg duration "$duration" \
                --arg publishedAt "$published_at" \
                --arg position "$position" \
                --arg likes "$likes" \
                --arg views "$views" \
                --arg comments "$comments" \
                --arg default "$thumbnails_default" \
                --arg medium "$thumbnails_medium" \
                --arg high "$thumbnails_high" \
                --arg standard "$thumbnails_standard" \
                --arg maxres "$thumbnails_maxres" \
                --arg videoOwnerChannelTitle "$channel_title" \
                --arg videoOwnerChannelId "$channel_id" \
                '
                .identifier = $identifier |
                .blueprint = $blueprint |
                .title = $title |
                .properties.link = $link |
                .properties.videoDescription = $videoDescription |
                .properties.duration = $duration |
                .properties.publishedAt = $publishedAt |
                .properties.position = $position |
                .properties.likes = $likes |
                .properties.views = $views |
                .properties.comments = $comments |
                .properties.thumbnails.default = $default |
                .properties.thumbnails.medium = $medium |
                .properties.thumbnails.high = $high |
                .properties.thumbnails.standard = $standard |
                .properties.thumbnails.maxres = $maxres |
                .properties.videoOwnerChannelTitle = $videoOwnerChannelTitle |
                .properties.videoOwnerChannelId = $videoOwnerChannelId |
                .relations.playlist = "$playlist_id"
                ')

              combined_json=$(echo "$combined_json" | jq --argjson video "$video_json" '. + [$video]')
            done

            next_page_token=$(echo "$playlist_items_response" | jq -r '.nextPageToken // ""')
            if [ -z "$next_page_token" ]; then
              break
            fi
          done

          # Save the combined JSON array to the environment variable for Port
          echo "$combined_json" > port_entities.json
          echo "entities=$(jq -c . port_entities.json)" >> $GITHUB_ENV

      - name: Bulk Create/Update YouTube Playlist and Video Entities in Port
        id: bulk_create_update
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: BULK_UPSERT
          entities: ${{ env.entities }}

      - name: Inform completion of request to Create / Update Catalog in Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: ${{ steps.bulk_create_update.outcome == 'success' && 'SUCCESS' || 'FAILURE' }}
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: ${{ steps.bulk_create_update.outcome == 'success' && 'YouTube Data created/Updated Successfully' || 'Error in YouTube Data creation/update' }}